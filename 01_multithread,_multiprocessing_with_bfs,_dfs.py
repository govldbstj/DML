# -*- coding: utf-8 -*-
"""01_multithread, multiprocessing with BFS, DFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17XFZKAhZY0TpyOgS3CZDTqKNRtHFdu4L

1. origin code of BFS, DFS
"""

from collections import deque
import time
import os

def BFS(graph, root):
    visited = []
    queue = deque([root])

    while queue:
        n = queue.popleft()
        if n not in visited:
            visited.append(n)
            if n in graph:
                temp = list(set(graph[n]) - set(visited))
                temp.sort()
                queue += temp
    return " ".join(str(i) for i in visited)

def DFS(graph, root):
    visited = []
    stack = [root]

    while stack:
        n = stack.pop()
        if n not in visited:
            visited.append(n)
            if n in graph:
                temp = list(set(graph[n]) - set(visited))
                temp.sort(reverse=True)
                stack += temp
    return " ".join(str(i) for i in visited)

start_time = time.process_time()
graph = {}
n = input().split(' ')
node, edge, start = [int(i) for i in n]
for i in range(edge):
    edge_info = input().split(' ')
    n1, n2 = [int(j) for j in edge_info]
    if n1 not in graph:
        graph[n1] = [n2]
    elif n2 not in graph[n1]:
        graph[n1].append(n2)

    if n2 not in graph:
        graph[n2] = [n1]
    elif n1 not in graph[n2]:
        graph[n2].append(n1)

print(DFS(graph, start))
print(BFS(graph, start))

end_time = time.process_time()

print("process time is ", end_time - start_time)

"""2. multithread vs multiprocess in BFS, DFS

"""

import threading # for multithread
from multiprocessing import Process # for multiprocess
import os

from collections import deque
import time
import random

def BFS(graph, root):
    visited = []
    queue = deque([root])

    while queue:
        n = queue.popleft()
        if n not in visited:
            visited.append(n)
            if n in graph:
                temp = list(set(graph[n]) - set(visited))
                temp.sort()
                queue += temp
    return " ".join(str(i) for i in visited)

def DFS(graph, root):
    visited = []
    stack = [root]

    while stack:
        n = stack.pop()
        if n not in visited:
            visited.append(n)
            if n in graph:
                temp = list(set(graph[n]) - set(visited))
                temp.sort(reverse=True)
                stack += temp
    return " ".join(str(i) for i in visited)

graph = {}
node = 10000
edge = 10000
start = 1
for i in range(edge):
    n1 = random.randrange(1, node)
    n2 = random.randrange(1, node)
    if n1 not in graph:
        graph[n1] = [n2]
    elif n2 not in graph[n1]:
        graph[n1].append(n2)

    if n2 not in graph:
        graph[n2] = [n1]
    elif n1 not in graph[n2]:
        graph[n2].append(n1)

1# origin
origin_start_time = time.process_time()

BFS(graph, start)
DFS(graph, start)

origin_end_time = time.process_time()

# multithread
th_start_time = time.process_time()

dt = threading.Thread(target = DFS, args = (graph, start))
bt = threading.Thread(target = BFS, args = (graph, start))

dt.start()
bt.start()

dt.join()
bt.join()

th_end_time = time.process_time()

# multiprocess
mp_start_time = time.process_time()

dp = Process(target = DFS, args = (graph, start))
bp = Process(target = BFS, args = (graph, start))

dp.start()
bp.start()

dp.join()
bp.join()

mp_end_time = time.process_time()

print("origin process time is ", origin_end_time - origin_start_time)
print("multithread process time is ", th_end_time - th_start_time)
print("multiprocessing process time is ", mp_end_time - mp_start_time)

os.cpu_count()

import tensorflow as tf
print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('GPU')))