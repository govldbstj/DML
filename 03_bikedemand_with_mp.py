# -*- coding: utf-8 -*-
"""03_bikedemand_with_MP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hm5MibiNjVq9IeRiX_NIY6gr5cG9brOc
"""

!pip install pycaret

import os

os.cpu_count()  # 2

from google.colab import drive
drive.mount('/content/drive')

import warnings

# Commented out IPython magic to ensure Python compatibility.
import pylab
import calendar
import numpy as np
import pandas as pd
from multiprocessing import Process # for multiprocess
import time
import seaborn as sn
from scipy import stats
import missingno as msno
from datetime import datetime
import matplotlib.pyplot as plt
import warnings
pd.options.mode.chained_assignment = None
warnings.filterwarnings("ignore", category=DeprecationWarning)
# %matplotlib inline

train = pd.read_csv('/content/drive/MyDrive/따릉이/train.csv')
test = pd.read_csv('/content/drive/MyDrive/따릉이/test.csv')

all_data = pd.concat([train, test], ignore_index = True)        # concatenate dataframe

def NMAE(true, pred):
    score = np.mean(np.abs(true-pred) / true)
    return score

def pre_data(all_data):

  def split_all_dates(data):                                      # split_all_                                     
    data['year'] = data['date'].apply(lambda x : x.split('-')[0]).astype('int')
    data['month'] = data['date'].apply(lambda x : x.split('-')[1]).astype('int')
    data['days'] = data['date'].apply(lambda x : x.split('-')[2]).astype('int')
    data['date'] = pd.to_datetime(data['date'])
    return data

  all_data = split_all_dates(all_data)

  def missing_fill_data(data):                                   # 결측치 추가
    data['precipitation'].fillna(0, inplace = True)     
    return data

  all_data = missing_fill_data(all_data)

  def pm_fill_data(data):           # 미세먼지 결측치 채우기 혹은 제거하기 # 두가지 실험 진행
    fill_features = ['PM10', 'PM2.5', 'sunshine_sum']
    for feature in fill_features:
        data[feature].fillna(method = 'bfill', inplace = True)    
    return data

  all_data = pm_fill_data(all_data)

  def category_season(data):
    data['season'] = data['month'].copy()
    data.loc[(data['season'] == 12) | (data['season'] <= 2), 'season'] = 0
    data.loc[(data['season'] >= 3) & (data['season'] <= 5), 'season'] = 1
    data.loc[(data['season'] >= 6) & (data['season'] <= 8), 'season'] = 2
    data.loc[(data['season'] >= 9) & (data['season'] <= 11), 'season'] = 3
    return data


  all_data = category_season(all_data)

  def is_weekend(data):                  # 연휴 파악
    if data.weekday() >= 5:
        return 1
    else:
        return 0
    
  all_data['is_week'] = all_data['date'].apply(lambda x : is_weekend(x))

  def append_holiday(data):
    data.loc[(data['days'] == 1) & (data['month'] == 1), 'is_week'] = 1
    data.loc[(data['days'] == 1) & (data['month'] == 3), 'is_week'] = 1
    data.loc[(data['days'] == 5) & (data['month'] == 5), 'is_week'] = 1
    data.loc[(data['days'] == 6) & (data['month'] == 6), 'is_week'] = 1
    data.loc[(data['days'] == 3) & (data['month'] == 10), 'is_week'] = 1
    data.loc[(data['days'] == 9) & (data['month'] == 10), 'is_week'] = 1
    data.loc[(data['days'] == 25) & (data['month'] == 12), 'is_week'] = 1
    
    return data

  all_data = append_holiday(all_data)


# 불쾌지수 산출식
  def feature_discomfort(humid, temp_low, temp_high):
    temp = (temp_low + temp_high)/2
    humid = humid / 100
    discomfort = 1.8*temp - 0.558*(1-humid)*(1.8*temp - 26) + 32
    return discomfort

# 불쾌지수 데이터 가져오기    
  def get_discomfort(data):
    all_data['discomfort'] = [0]*len(all_data)
    for i in range(len(all_data)):
        all_data.discomfort[i] = feature_discomfort(all_data.humidity[i],
                                               all_data.temp_lowest[i],
                                               all_data.temp_highest[i])
    return data

  all_data = get_discomfort(all_data)

  def append_cold_measure_temp_diff(data):
    # 추운 정도
    data['cold_measure'] = data['temp_lowest'] / data['wind_mean']
    # 일교차 반영
#     data['temp_diff'] = data['temp_highest'] - data['temp_lowest']
    return data

  all_data = append_cold_measure_temp_diff(all_data)

  def append_feel_temp_heat_index(data):
#     체감 온도
    data['feel_data'] = 13.12 + 0.6215*data['temp_mean'] - 11.37*(data['wind_mean']** 0.16) + 0.3965*data['temp_mean']*(data['wind_mean']** 0.16)

    # 열지수
    data['temp_mean_f'] = (data['temp_mean']* (9/5)) + 32   
    T = data['temp_mean_f']
    RH = data['humidity']
    data['heat_index'] = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH
    data['heat_index'] = (data['heat_index']-32) * 5/9
    return data

  all_data = append_feel_temp_heat_index(all_data)

# (Kaggle 수상 아이디어)
  def append_kaggle_idea(data):
    data['ideal'] = data[['temp_mean', 'wind_mean']].apply(lambda x: (0, 1)[x['temp_mean'] > 27 and x['wind_mean'] < 30], axis = 1)
    data['sticky'] = data[['humidity', 'is_week']].apply(lambda x: (0, 1)[x['is_week'] == 1 and x['humidity'] >= 60], axis = 1)
    return data

  all_data = append_kaggle_idea(all_data)

# (DACON 수상 아이디어) 
  def append_sweat_info(data):
    all_data['sweat_info'] = all_data['temp_highest']*all_data['humidity']
    all_data['sweat_info2'] = all_data['temp_lowest']*all_data['humidity']
    return all_data

  all_data = append_sweat_info(all_data)

# 비 유무 
  def is_rain(data):
    if data > 0:
        return 1
    else:
        return 0
  all_data['is_rain'] = all_data['precipitation'].apply(lambda x : is_rain(x))

  def golden_feature(data):
    data['season_sum_year'] = data['season'] + data['year']
    data['heat_index_sum_precipitation'] = data['heat_index'] + data['precipitation']
    data['precipitation_diff_discomfort'] = data['precipitation'] - data['discomfort']
    data['season_multiply_year'] = data['season'] * data['year']
    data['precipitation_diff_temp_lowest'] = data['precipitation'] - data['temp_lowest']
    data['cold_measure_multiply_sunshine_rate'] = data['cold_measure'] * data['sunshine_rate']
    data['season_multiply_temp_highest'] = data['season'] * data['temp_highest']
    data['precipitation_diff_season'] = data['precipitation'] - data['season']
    data['season_multiply_sunshine_rate'] = data['season'] * data['sunshine_rate']
    data['year_sum_temp_highest'] = data['year'] + data['temp_highest']
    return data

  all_data = golden_feature(all_data)

#pip install --upgrade numpy 1.20.2

# singleprocess
sp_start_time = time.process_time()

pre_data(all_data)

sp_end_time = time.process_time()

print(sp_end_time - sp_start_time)

# multiprocess

mp_start_time = time.process_time()

dp = Process(target = pre_data, args = all_data)
bp = Process(target = pre_data, args = all_data)

dp.start()
bp.start()

dp.join()
bp.join()

mp_end_time = time.process_time()

print(mp_end_time - mp_start_time)

def delete_features(data):         # feature 제거
    delete_feature = ['temp_mean_f', 'wind_max', 'PM2.5', 'sunshine_sum']
#     'days' , , 'month'
    for feature in delete_feature:
        data.drop(feature, axis = 1, inplace = True)

    return data

all_data = delete_features(all_data)

def seprate_data(concat_Alldata):
    train = concat_Alldata[pd.notnull(concat_Alldata['rental'])]
    test = concat_Alldata[~pd.notnull(concat_Alldata['rental'])]
    return train, test

train, test = seprate_data(all_data)

train.info()

train['rental'] = np.log1p(train['rental'])

from pycaret.regression import *
model = setup(train, target = 'rental',  fold_shuffle=True, 
              fold=15, 
              session_id=530,
              remove_multicollinearity = True,
              n_jobs = -1,
              ignore_low_variance = True)

add_metric('NMAE', 'NMAE', NMAE, greater_is_better = False)
top5_model = compare_models(round=4, n_select = 5, sort='NMAE')

tune_modell = [tune_model(i, optimize = 'MAE') for i in top5_model[1:]]

temp = [top5_model[0],top5_model[3], tune_modell[0], tune_modell[1]]
blender = blend_models(temp, weights= [0.4, 0.2, 0.2, 0.2])

prediction = predict_model(blender, data=test)
pred = np.expm1(prediction['Label'])*1.3

temp = pd.read_csv('/content/drive/MyDrive/따릉이/sample_submission.csv')
temp['rental'] = pred.reset_index()['Label']

submission = pd.DataFrame({
        "date" : temp['date'],
        "rental" : temp['rental']
})

submission.to_csv('submission_final.csv', index = False)